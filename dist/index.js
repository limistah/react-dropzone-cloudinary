!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? t(exports, require('react'), require('prop-types')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types'], t) : t((e = e || self).reactDropzoneCloudinary = {}, e.React, e.PropTypes); }(this, (e, oe, t) => {
  const h = 'default' in oe ? oe.default : oe; function y() { return (y = Object.assign || function (e) { for (let t = 1; t < arguments.length; t++) { const r = arguments[t]; for (const n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]); } return e; }).apply(this, arguments); } function v(t, e) { const r = Object.keys(t); if (Object.getOwnPropertySymbols) { let n = Object.getOwnPropertySymbols(t); e && (n = n.filter(e => Object.getOwnPropertyDescriptor(t, e).enumerable)), r.push(...n); } return r; } function g(e, t) {
    return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) {
      let r = [],
        n = !0,
        o = !1,
        i = void 0; try { for (var a, u = e[Symbol.iterator](); !(n = (a = u.next()).done) && (r.push(a.value), !t || r.length !== t); n = !0); } catch (e) { o = !0, i = e; } finally { try { n || u.return == null || u.return(); } finally { if (o) throw i; } } return r;
    }(e, t)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance'); }());
  } function c(i, a, u, s) { return new (u = u || Promise)(((e, t) => { function r(e) { try { o(s.next(e)); } catch (e) { t(e); } } function n(e) { try { o(s.throw(e)); } catch (e) { t(e); } } function o(t) { t.done ? e(t.value) : new u(((e) => { e(t.value); })).then(r, n); }o((s = s.apply(i, a || [])).next()); })); } function l(r, n) {
    let o,
      i,
      a,
      e,
      u = {
        label: 0, sent() { if (1 & a[0]) throw a[1]; return a[1]; }, trys: [], ops: [],
      }; return e = { next: t(0), throw: t(1), return: t(2) }, typeof Symbol === 'function' && (e[Symbol.iterator] = function () { return this; }), e; function t(t) { return function (e) { return (function (t) { if (o) throw new TypeError('Generator is already executing.'); for (;u;) try { if (o = 1, i && (a = 2 & t[0] ? i.return : t[0] ? i.throw || ((a = i.return) && a.call(i), 0) : i.next) && !(a = a.call(i, t[1])).done) return a; switch (i = 0, a && (t = [2 & t[0], a.value]), t[0]) { case 0: case 1: a = t; break; case 4: return u.label++, { value: t[1], done: !1 }; case 5: u.label++, i = t[1], t = [0]; continue; case 7: t = u.ops.pop(), u.trys.pop(); continue; default: if (!(a = (a = u.trys).length > 0 && a[a.length - 1]) && (t[0] === 6 || t[0] === 2)) { u = 0; continue; } if (t[0] === 3 && (!a || t[1] > a[0] && t[1] < a[3])) { u.label = t[1]; break; } if (t[0] === 6 && u.label < a[1]) { u.label = a[1], a = t; break; } if (a && u.label < a[2]) { u.label = a[2], u.ops.push(t); break; }a[2] && u.ops.pop(), u.trys.pop(); continue; }t = n.call(r, u); } catch (e) { t = [6, e], i = 0; } finally { o = a = 0; } if (5 & t[0]) throw t[1]; return { value: t[0] ? t[1] : void 0, done: !0 }; }([t, e])); }; }
  } function r(e, t) {
    let r = typeof Symbol === 'function' && e[Symbol.iterator]; if (!r) return e; let n,
      o,
      i = r.call(e),
      a = []; try { for (;(void 0 === t || t-- > 0) && !(n = i.next()).done;)a.push(n.value); } catch (e) { o = { error: e }; } finally { try { n && !n.done && (r = i.return) && r.call(i); } finally { if (o) throw o.error; } } return a;
  } function o() { for (var e = [], t = 0; t < arguments.length; t++)e = e.concat(r(arguments[t])); return e; }t = t && t.hasOwnProperty('default') ? t.default : t; const i = new Map([['avi', 'video/avi'], ['gif', 'image/gif'], ['ico', 'image/x-icon'], ['jpeg', 'image/jpeg'], ['jpg', 'image/jpeg'], ['mkv', 'video/x-matroska'], ['mov', 'video/quicktime'], ['mp4', 'video/mp4'], ['pdf', 'application/pdf'], ['png', 'image/png'], ['zip', 'application/zip'], ['doc', 'application/msword'], ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']]); function a(e, t) {
    const r = (function (e) {
      const t = e.name; if (t && t.lastIndexOf('.') !== -1 && !e.type) {
        let r = t.split('.').pop().toLowerCase(),
          n = i.get(r); n && Object.defineProperty(e, 'type', {
          value: n, writable: !1, configurable: !1, enumerable: !0,
        });
      } return e;
    }(e)); if (typeof r.path !== 'string') {
      const n = e.webkitRelativePath; Object.defineProperty(r, 'path', {
        value: typeof t === 'string' ? t : typeof n === 'string' && n.length > 0 ? n : e.name, writable: !1, configurable: !1, enumerable: !0,
      });
    } return r;
  } const n = ['.DS_Store', 'Thumbs.db']; function ie(t) { return c(this, void 0, void 0, function () { return l(this, e => [2, (function (e) { return !!e.dataTransfer; }(t)) && t.dataTransfer ? (function (r, n) { return c(this, void 0, void 0, function () { let t; return l(this, (e) => { switch (e.label) { case 0: return r.items ? (t = s(r.items).filter(e => e.kind==='file'), n !== 'drop' ? [2, t] : [4, Promise.all(t.map(f))]) : [3, 2]; case 1: return [2, u(function r(e) { return e.reduce((e, t) => o(e, Array.isArray(t) ? r(t) : [t]), []); }(e.sent()))]; case 2: return [2, u(s(r.files).map(e => a(e)))]; } }); }); }(t.dataTransfer, t.type)) : (function (e) { return ((function (e) { return e !== null; }(e.target)) && e.target.files ? s(e.target.files) : []).map(e => a(e)); }(t))]); }); } function u(e) { return e.filter(e => n.indexOf(e.name) === -1); } function s(e) { for (var t = [], r = 0; r < e.length; r++) { const n = e[r]; t.push(n); } return t; } function f(e) { if (typeof e.webkitGetAsEntry !== 'function') return p(e); const t = e.webkitGetAsEntry(); return t && t.isDirectory ? m(t) : p(e); } function p(e) { const t = e.getAsFile(); if (!t) return Promise.reject(`${e} is not a File`); const r = a(t); return Promise.resolve(r); } function d(t) { return c(this, void 0, void 0, function () { return l(this, e => [2, t.isDirectory ? m(t) : (function (n) { return c(this, void 0, void 0, function () { return l(this, e => [2, new Promise(((r, t) => { n.file((e) => { var t = a(e, n.fullPath); r(t) }, (e) => { t(e);}); }))]); }); }(t))]); }); } function m(e) {
    const t = e.createReader(); return new Promise(((a, u) => {
      const s = []; !(function i() {
        const e = this; t.readEntries(o => c(e, void 0, void 0, function () {
          let t,
            r,
            n; return l(this, (e) => { switch (e.label) { case 0: if (o.length) return [3, 5]; e.label = 1; case 1: return e.trys.push([1, 3,, 4]), [4, Promise.all(s)]; case 2: return t = e.sent(), a(t), [3, 4]; case 3: return r = e.sent(), u(r), [3, 4]; case 4: return [3, 6]; case 5: n = Promise.all(o.map(d)), s.push(n), i(), e.label = 6; case 6: return [2]; } });
        }), (e) => { u(e); });
      }());
    }));
  } typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' && self; function b(e) { return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, 'default') ? e.default : e; } function w(e, t) { return e(t = { exports: {} }, t.exports), t.exports; } const O = b(w((e) => {
    function n(e) { if (o[e]) return o[e].exports; const t = o[e] = { i: e, l: !1, exports: {} }; return r[e].call(t.exports, t, t.exports, n), t.l = !0, t.exports; } let r,
      o; e.exports = (o = {}, n.m = r = [function (e, t, r) {
      t.__esModule = !0, t.default = function (e, t) {
        if (e && t) {
          let r = Array.isArray(t) ? t : t.split(','),
            n = e.name || '',
            o = e.type || '',
            i = o.replace(/\/.*$/, ''); return r.some((e) => { const t = e.trim(); return t.charAt(0) === '.' ? n.toLowerCase().endsWith(t.toLowerCase()) : t.endsWith('/*') ? i === t.replace(/\/.*$/, '') : o === t; });
        } return !0;
      };
    }], n.c = o, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { configurable: !1, enumerable: !0, get: r }); }, n.n = function (e) { const t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, 'a', t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = '', n(n.s = 0));
  })); function ae(e, t) {
    return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) {
      if (!(Symbol.iterator in Object(e) || Object.prototype.toString.call(e) === '[object Arguments]')) return; let r = [],
        n = !0,
        o = !1,
        i = void 0; try { for (var a, u = e[Symbol.iterator](); !(n = (a = u.next()).done) && (r.push(a.value), !t || r.length !== t); n = !0); } catch (e) { o = !0, i = e; } finally { try { n || u.return == null || u.return(); } finally { if (o) throw i; } } return r;
    }(e, t)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance'); }());
  } let S = function (e) { e = Array.isArray(e) && e.length === 1 ? e[0] : e; const t = Array.isArray(e) ? 'one of '.concat(e.join(', ')) : e; return { code: 'file-invalid-type', message: 'File type must be '.concat(t) }; },
    C = function (e) { return { code: 'file-too-large', message: 'File is larger than '.concat(e, ' bytes') }; },
    x = function (e) { return { code: 'file-too-small', message: 'File is smaller than '.concat(e, ' bytes') }; },
    ue = { code: 'too-many-files', message: 'Too many files' }; function se(e, t) { const r = e.type === 'application/x-moz-file' || O(e, t); return [r, r ? null : S(t)]; } function ce(e, t, r) { if (j(e.size)) if (j(t) && j(r)) { if (e.size > r) return [!1, C(r)]; if (e.size < t) return [!1, x(t)]; } else { if (j(t) && e.size < t) return [!1, x(t)]; if (j(r) && e.size > r) return [!1, C(r)]; } return [!0, null]; } function j(e) { return e != null; } function le(e) { return typeof e.isPropagationStopped === 'function' ? e.isPropagationStopped() : void 0 !== e.cancelBubble && e.cancelBubble; } function fe(e) { return e.dataTransfer ? Array.prototype.some.call(e.dataTransfer.types, e => e === 'Files' || e === 'application/x-moz-file') : !!e.target && !!e.target.files; } function pe(e) { e.preventDefault(); } function de() { for (var e = arguments.length, o = new Array(e), t = 0; t < e; t++)o[t] = arguments[t]; return function (t) { for (var e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)r[n - 1] = arguments[n]; return o.some(e => !le(t) && e && e(...[t].concat(r)), le(t)); }; } function he(e) { return (function (e) { if (Array.isArray(e)) { for (var t = 0, r = new Array(e.length); t < e.length; t++)r[t] = e[t]; return r; } }(e)) || (function (e) { if (Symbol.iterator in Object(e) || Object.prototype.toString.call(e) === '[object Arguments]') return Array.from(e); }(e)) || (function () { throw new TypeError('Invalid attempt to spread non-iterable instance'); }()); } function ye(e, t) {
    return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) {
      if (!(Symbol.iterator in Object(e) || Object.prototype.toString.call(e) === '[object Arguments]')) return; let r = [],
        n = !0,
        o = !1,
        i = void 0; try { for (var a, u = e[Symbol.iterator](); !(n = (a = u.next()).done) && (r.push(a.value), !t || r.length !== t); n = !0); } catch (e) { o = !0, i = e; } finally { try { n || u.return == null || u.return(); } finally { if (o) throw i; } } return r;
    }(e, t)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance'); }());
  } function E(t, e) { const r = Object.keys(t); if (Object.getOwnPropertySymbols) { let n = Object.getOwnPropertySymbols(t); e && (n = n.filter(e => Object.getOwnPropertyDescriptor(t, e).enumerable)), r.push(...n); } return r; } function ve(t) { for (let e = 1; e < arguments.length; e++) { var r = arguments[e] != null ? arguments[e] : {}; e % 2 ? E(r, !0).forEach((e) => { ge(t, e, r[e]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : E(r).forEach((e) => { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e)); }); } return t; } function ge(e, t, r) {
    return t in e ? Object.defineProperty(e, t, {
      value: r, enumerable: !0, configurable: !0, writable: !0,
    }) : e[t] = r, e;
  } function me(e, t) {
    if (e == null) return {}; let r,
      n,
      o = (function (e, t) {
        if (e == null) return {}; let r,
          n,
          o = {},
          i = Object.keys(e); for (n = 0; n < i.length; n++)r = i[n], t.indexOf(r) >= 0 || (o[r] = e[r]); return o;
      }(e, t)); if (Object.getOwnPropertySymbols) { const i = Object.getOwnPropertySymbols(e); for (n = 0; n < i.length; n++)r = i[n], t.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(e, r) && (o[r] = e[r]); } return o;
  } const P = oe.forwardRef((e, t) => {
    let r = e.children,
      n = (function () {
        function e() { N && setTimeout(() => { T.current && (T.current.files.length || (F({ type: 'closeDialog' }), typeof b === 'function' && b())); }, 300); } var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          l = t.accept,
          r = t.disabled,
          p = void 0 !== r && r,
          n = t.getFilesFromEvent,
          o = void 0 === n ? ie : n,
          i = t.maxSize,
          f = void 0 === i ? 1 / 0 : i,
          a = t.minSize,
          d = void 0 === a ? 0 : a,
          u = t.multiple,
          h = void 0 === u || u,
          s = t.onDragEnter,
          c = t.onDragLeave,
          y = t.onDragOver,
          v = t.onDrop,
          g = t.onDropAccepted,
          m = t.onDropRejected,
          b = t.onFileDialogCancel,
          w = t.preventDropOnDocument,
          O = void 0 === w || w,
          S = t.noClick,
          C = void 0 !== S && S,
          x = t.noKeyboard,
          j = void 0 !== x && x,
          E = t.noDrag,
          P = void 0 !== E && E,
          D = t.noDragEventsBubbling,
          k = void 0 !== D && D,
          A = oe.useRef(null),
          T = oe.useRef(null),
          _ = ye(oe.useReducer(we, be), 2),
          R = _[0],
          F = _[1],
          B = R.isFocused,
          N = R.isFileDialogActive,
          L = R.draggedFiles,
          U = oe.useCallback(() => { T.current && (F({ type: 'openDialog' }), T.current.value = null, T.current.click()); }, [F]); oe.useEffect(() => window.addEventListener('focus', e, !1), () => { window.removeEventListener('focus', e, !1); }, [T, N, b]); function M(e) { A.current && A.current.contains(e.target) || (e.preventDefault(), K.current = []); } var z = oe.useCallback((e) => { A.current && A.current.isEqualNode(e.target) && (e.keyCode !== 32 && e.keyCode !== 13 || (e.preventDefault(), U())); }, [A, T]),
          I = oe.useCallback(() => { F({ type: 'focus' }); }, []),
          q = oe.useCallback(() => { F({ type: 'blur' }); }, []),
          H = oe.useCallback(() => { C || (!(function (e) { const t = arguments.length > 0 && void 0 !== e ? e : window.navigator.userAgent; return (function (e) { return e.indexOf('MSIE') !== -1 || e.indexOf('Trident/') !== -1; }(t)) || (function (e) { return e.indexOf('Edge/') !== -1; }(t)); }()) ? U() : setTimeout(U, 0)); }, [T, C]),
          K = oe.useRef([]); oe.useEffect(() => O && (document.addEventListener('dragover', pe, !1), document.addEventListener('drop', M, !1)), () => { O && (document.removeEventListener('dragover', pe), document.removeEventListener('drop', M)); }, [A, O]); function W(e) { return p ? null : e; } function $(e) { return j ? null : W(e); } function V(e) { return P ? null : W(e); } var X = oe.useCallback((t) => { t.preventDefault(), t.persist(), Q(t), K.current = [].concat(he(K.current), [t.target]), fe(t) && Promise.resolve(o(t)).then((e) => { le(t) && !k || (F({ draggedFiles: e, isDragActive: !0, type: 'setDraggedFiles' }), s && s(t)); }); }, [o, s, k]),
          G = oe.useCallback((e) => { if (e.preventDefault(), e.persist(), Q(e), e.dataTransfer) try { e.dataTransfer.dropEffect = 'copy'; } catch (e) {} return fe(e) && y && y(e), !1; }, [y, k]),
          J = oe.useCallback((e) => {
            e.preventDefault(), e.persist(), Q(e); let t = K.current.filter(e => A.current && A.current.contains(e)),
              r = t.indexOf(e.target); r !== -1 && t.splice(r, 1), (K.current = t).length > 0 || (F({ isDragActive: !1, type: 'setDraggedFiles', draggedFiles: [] }), fe(e) && c && c(e));
          }, [A, c, k]),
          Z = oe.useCallback((t) => {
            t.preventDefault(), t.persist(), Q(t), K.current = [], fe(t) && Promise.resolve(o(t)).then((e) => {
              if (!le(t) || k) {
                let s = [],
                  c = []; e.forEach((e) => {
                  let t = ye(se(e, l), 2),
                    r = t[0],
                    n = t[1],
                    o = ye(ce(e, d, f), 2),
                    i = o[0],
                    a = o[1]; if (r && i)s.push(e); else { const u = [n, a].filter(e => e); c.push({ file: e, errors: u }); }
                }), !h && s.length > 1 && (s.forEach((e) => { c.push({ file: e, errors: [ue] }); }), s.splice(0)), F({ acceptedFiles: s, fileRejections: c, type: 'setFiles' }), v && v(s, c, t), c.length > 0 && m && m(c, t), s.length > 0 && g && g(s, t);
              }
            }), F({ type: 'reset' });
          }, [h, l, d, f, o, v, g, m, k]),
          Q = function (e) { k && e.stopPropagation(); },
          Y = oe.useMemo(() => function () {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
              t = e.refKey,
              r = void 0 === t ? 'ref' : t,
              n = e.onKeyDown,
              o = e.onFocus,
              i = e.onBlur,
              a = e.onClick,
              u = e.onDragEnter,
              s = e.onDragOver,
              c = e.onDragLeave,
              l = e.onDrop,
              f = me(e, ['refKey', 'onKeyDown', 'onFocus', 'onBlur', 'onClick', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop']); return ve(ge({
              onKeyDown: $(de(n, z)), onFocus: $(de(o, I)), onBlur: $(de(i, q)), onClick: W(de(a, H)), onDragEnter: V(de(u, X)), onDragOver: V(de(s, G)), onDragLeave: V(de(c, J)), onDrop: V(de(l, Z)),
            }, r, A), p || j ? {} : { tabIndex: 0 }, {}, f);
          }, [A, z, I, q, H, X, G, J, Z, j, P, p]),
          ee = oe.useCallback((e) => { e.stopPropagation(); }, []),
          te = oe.useMemo(() => function () {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
              t = e.refKey,
              r = void 0 === t ? 'ref' : t,
              n = e.onChange,
              o = e.onClick,
              i = me(e, ['refKey', 'onChange', 'onClick']); return ve({}, ge({
              accept: l, multiple: h, type: 'file', style: { display: 'none' }, onChange: W(de(n, Z)), onClick: W(de(o, ee)), autoComplete: 'off', tabIndex: -1,
            }, r, T), {}, i);
          }, [T, l, h, Z, p]),
          re = L.length,
          ne = re > 0 && (function (e) {
            let t = e.files,
              n = e.accept,
              o = e.minSize,
              i = e.maxSize; return !(!e.multiple && t.length > 1) && t.every((e) => {
              let t = ae(se(e, n), 1)[0],
                r = ae(ce(e, o, i), 1)[0]; return t && r;
            });
          }({
            files: L, accept: l, minSize: d, maxSize: f, multiple: h,
          })); return ve({}, R, {
          isDragAccept: ne, isDragReject: re > 0 && !ne, isFocused: B && !p, getRootProps: Y, getInputProps: te, rootRef: A, inputRef: T, open: W(U),
        });
      }(me(e, ['children']))),
      o = n.open,
      i = me(n, ['open']); return oe.useImperativeHandle(t, () => ({ open: o }), [o]), h.createElement(oe.Fragment, null, r(ve({}, i, { open: o })));
  }); P.displayName = 'Dropzone'; var be = {
    isFocused: !(P.propTypes = {
      children: t.func, accept: t.oneOfType([t.string, t.arrayOf(t.string)]), multiple: t.bool, preventDropOnDocument: t.bool, noClick: t.bool, noKeyboard: t.bool, noDrag: t.bool, noDragEventsBubbling: t.bool, minSize: t.number, maxSize: t.number, disabled: t.bool, getFilesFromEvent: t.func, onFileDialogCancel: t.func, onDragEnter: t.func, onDragLeave: t.func, onDragOver: t.func, onDrop: t.func, onDropAccepted: t.func, onDropRejected: t.func,
    }),
    isFileDialogActive: !1,
    isDragActive: !1,
    isDragAccept: !1,
    isDragReject: !1,
    draggedFiles: [],
    acceptedFiles: [],
    fileRejections: [],
  }; function we(e, t) {
    switch (t.type) {
      case 'focus': return ve({}, e, { isFocused: !0 }); case 'blur': return ve({}, e, { isFocused: !1 }); case 'openDialog': return ve({}, e, { isFileDialogActive: !0 }); case 'closeDialog': return ve({}, e, { isFileDialogActive: !1 }); case 'setDraggedFiles': var r = t.isDragActive; return ve({}, e, { draggedFiles: t.draggedFiles, isDragActive: r }); case 'setFiles': return ve({}, e, { acceptedFiles: t.acceptedFiles, fileRejections: t.fileRejections }); case 'reset': return ve({}, e, {
        isFileDialogActive: !1, isDragActive: !1, draggedFiles: [], acceptedFiles: [], fileRejections: [],
      }); default: return e;
    }
  } function D(r, n) { return function () { for (var e = new Array(arguments.length), t = 0; t < e.length; t++)e[t] = arguments[t]; return r.apply(n, e); }; } const k = Object.prototype.toString; function A(e) { return k.call(e) === '[object Array]'; } function T(e) { return void 0 === e; } function _(e) { return e !== null && typeof e === 'object'; } function R(e) { return k.call(e) === '[object Function]'; } function F(e, t) { if (e != null) if (typeof e !== 'object' && (e = [e]), A(e)) for (let r = 0, n = e.length; r < n; r++)t.call(null, e[r], r, e); else for (const o in e)Object.prototype.hasOwnProperty.call(e, o) && t.call(null, e[o], o, e); } const B = {
    isArray: A, isArrayBuffer(e) { return k.call(e) === '[object ArrayBuffer]'; }, isBuffer(e) { return e !== null && !T(e) && e.constructor !== null && !T(e.constructor) && typeof e.constructor.isBuffer === 'function' && e.constructor.isBuffer(e); }, isFormData(e) { return typeof FormData !== 'undefined' && e instanceof FormData; }, isArrayBufferView(e) { return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView ? ArrayBuffer.isView(e) : e && e.buffer && e.buffer instanceof ArrayBuffer; }, isString(e) { return typeof e === 'string'; }, isNumber(e) { return typeof e === 'number'; }, isObject: _, isUndefined: T, isDate(e) { return k.call(e) === '[object Date]'; }, isFile(e) { return k.call(e) === '[object File]'; }, isBlob(e) { return k.call(e) === '[object Blob]'; }, isFunction: R, isStream(e) { return _(e) && R(e.pipe); }, isURLSearchParams(e) { return typeof URLSearchParams !== 'undefined' && e instanceof URLSearchParams; }, isStandardBrowserEnv() { return (typeof navigator === 'undefined' || navigator.product !== 'ReactNative' && navigator.product !== 'NativeScript' && navigator.product !== 'NS') && (typeof window !== 'undefined' && typeof document !== 'undefined'); }, forEach: F, merge: function r() { const n = {}; function e(e, t) { typeof n[t] === 'object' && typeof e === 'object' ? n[t] = r(n[t], e) : n[t] = e; } for (let t = 0, o = arguments.length; t < o; t++)F(arguments[t], e); return n; }, deepMerge: function r() { const n = {}; function e(e, t) { typeof n[t] === 'object' && typeof e === 'object' ? n[t] = r(n[t], e) : n[t] = typeof e === 'object' ? r({}, e) : e; } for (let t = 0, o = arguments.length; t < o; t++)F(arguments[t], e); return n; }, extend(r, e, n) { return F(e, (e, t) => { r[t] = n && typeof e === 'function' ? D(e, n) : e; }), r; }, trim(e) { return e.replace(/^\s*/, '').replace(/\s*$/, ''); },
  }; function N(e) {
    return encodeURIComponent(e).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$')
      .replace(/%2C/gi, ',')
      .replace(/%20/g, '+')
      .replace(/%5B/gi, '[')
      .replace(/%5D/gi, ']');
  } function L(e, t, r) { if (!t) return e; let n; if (r)n = r(t); else if (B.isURLSearchParams(t))n = t.toString(); else { const o = []; B.forEach(t, (e, t) => { e != null && (B.isArray(e) ? t += '[]' : e = [e], B.forEach(e, (e) => { B.isDate(e) ? e = e.toISOString() : B.isObject(e) && (e = JSON.stringify(e)), o.push(`${N(t)}=${N(e)}`); })); }), n = o.join('&'); } if (n) { const i = e.indexOf('#'); i !== -1 && (e = e.slice(0, i)), e += (e.indexOf('?') === -1 ? '?' : '&') + n; } return e; } function U() { this.handlers = []; }U.prototype.use = function (e, t) { return this.handlers.push({ fulfilled: e, rejected: t }), this.handlers.length - 1; }, U.prototype.eject = function (e) { this.handlers[e] && (this.handlers[e] = null); }, U.prototype.forEach = function (t) { B.forEach(this.handlers, (e) => { e !== null && t(e); }); }; function M(t, r, e) { return B.forEach(e, (e) => { t = e(t, r); }), t; } function z(e) { return !(!e || !e.__CANCEL__); } function I(r, n) { B.forEach(r, (e, t) => { t !== n && t.toUpperCase() === n.toUpperCase() && (r[n] = e, delete r[t]); }); } function q(e, t, r, n, o) {
    return (function (e, t, r, n, o) {
      return e.config = t, r && (e.code = r), e.request = n, e.response = o, e.isAxiosError = !0, e.toJSON = function () {
        return {
          message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code,
        };
      }, e;
    }(new Error(e), t, r, n, o));
  } let H,
    K,
    W,
    $ = U,
    V = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'],
    X = B.isStandardBrowserEnv() ? (K = /(msie|trident)/i.test(navigator.userAgent), W = document.createElement('a'), H = G(window.location.href), function (e) { const t = B.isString(e) ? G(e) : e; return t.protocol === H.protocol && t.host === H.host; }) : function () { return !0; }; function G(e) {
    let t = e; return K && (W.setAttribute('href', t), t = W.href), W.setAttribute('href', t), {
      href: W.href, protocol: W.protocol ? W.protocol.replace(/:$/, '') : '', host: W.host, search: W.search ? W.search.replace(/^\?/, '') : '', hash: W.hash ? W.hash.replace(/^#/, '') : '', hostname: W.hostname, port: W.port, pathname: W.pathname.charAt(0) === '/' ? W.pathname : `/${W.pathname}`,
    };
  } function J(l) {
    return new Promise(((r, n) => {
      let o = l.data,
        i = l.headers; B.isFormData(o) && delete i['Content-Type']; let a = new XMLHttpRequest(); if (l.auth) {
        let e = l.auth.username || '',
          t = l.auth.password || ''; i.Authorization = `Basic ${btoa(`${e}:${t}`)}`;
      } const u = (function (e, t) { return e && !(function (e) { return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e); }(t)) ? (function (e, t) { return t ? `${e.replace(/\/+$/, '')}/${t.replace(/^\/+/, '')}` : e; }(e, t)) : t; }(l.baseURL, l.url)); if (a.open(l.method.toUpperCase(), L(u, l.params, l.paramsSerializer), !0), a.timeout = l.timeout, a.onreadystatechange = function () {
        if (a && a.readyState === 4 && (a.status !== 0 || a.responseURL && a.responseURL.indexOf('file:') === 0)) {
          let e = 'getAllResponseHeaders' in a ? (function (e) {
              let t,
                r,
                n,
                o = {}; return e && B.forEach(e.split('\n'), (e) => { if (n = e.indexOf(':'), t = B.trim(e.substr(0, n)).toLowerCase(), r = B.trim(e.substr(n + 1)), t) { if (o[t] && V.indexOf(t) >= 0) return; o[t] = t === 'set-cookie' ? (o[t] ? o[t] : []).concat([r]) : o[t] ? `${o[t]}, ${r}` : r; } }), o;
            }(a.getAllResponseHeaders())) : null,
            t = {
              data: l.responseType && l.responseType !== 'text' ? a.response : a.responseText, status: a.status, statusText: a.statusText, headers: e, config: l, request: a,
            }; !(function (e, t, r) { const n = r.config.validateStatus; !n || n(r.status) ? e(r) : t(q(`Request failed with status code ${r.status}`, r.config, null, r.request, r)); }(r, n, t)), a = null;
        }
      }, a.onabort = function () { a && (n(q('Request aborted', l, 'ECONNABORTED', a)), a = null); }, a.onerror = function () { n(q('Network Error', l, null, a)), a = null; }, a.ontimeout = function () { let e = `timeout of ${l.timeout}ms exceeded`; l.timeoutErrorMessage && (e = l.timeoutErrorMessage), n(q(e, l, 'ECONNABORTED', a)), a = null; }, B.isStandardBrowserEnv()) {
        let s = Z,
          c = (l.withCredentials || X(u)) && l.xsrfCookieName ? s.read(l.xsrfCookieName) : void 0; c && (i[l.xsrfHeaderName] = c);
      } if ('setRequestHeader' in a && B.forEach(i, (e, t) => { void 0 === o && t.toLowerCase() === 'content-type' ? delete i[t] : a.setRequestHeader(t, e); }), B.isUndefined(l.withCredentials) || (a.withCredentials = !!l.withCredentials), l.responseType) try { a.responseType = l.responseType; } catch (e) { if (l.responseType !== 'json') throw e; } typeof l.onDownloadProgress === 'function' && a.addEventListener('progress', l.onDownloadProgress), typeof l.onUploadProgress === 'function' && a.upload && a.upload.addEventListener('progress', l.onUploadProgress), l.cancelToken && l.cancelToken.promise.then((e) => { a && (a.abort(), n(e), a = null); }), void 0 === o && (o = null), a.send(o);
    }));
  } var Z = B.isStandardBrowserEnv() ? { write(e, t, r, n, o, i) { const a = []; a.push(`${e}=${encodeURIComponent(t)}`), B.isNumber(r) && a.push(`expires=${new Date(r).toGMTString()}`), B.isString(n) && a.push(`path=${n}`), B.isString(o) && a.push(`domain=${o}`), !0 === i && a.push('secure'), document.cookie = a.join('; '); }, read(e) { const t = document.cookie.match(new RegExp(`(^|;\\s*)(${e})=([^;]*)`)); return t ? decodeURIComponent(t[3]) : null; }, remove(e) { this.write(e, '', Date.now() - 864e5); } } : { write() {}, read() { return null; }, remove() {} },
    Q = { 'Content-Type': 'application/x-www-form-urlencoded' }; function Y(e, t) { !B.isUndefined(e) && B.isUndefined(e['Content-Type']) && (e['Content-Type'] = t); } let ee,
    te = {
      adapter: (typeof XMLHttpRequest !== 'undefined' ? ee = J : typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]' && (ee = J), ee), transformRequest: [function (e, t) { return I(t, 'Accept'), I(t, 'Content-Type'), B.isFormData(e) || B.isArrayBuffer(e) || B.isBuffer(e) || B.isStream(e) || B.isFile(e) || B.isBlob(e) ? e : B.isArrayBufferView(e) ? e.buffer : B.isURLSearchParams(e) ? (Y(t, 'application/x-www-form-urlencoded;charset=utf-8'), e.toString()) : B.isObject(e) ? (Y(t, 'application/json;charset=utf-8'), JSON.stringify(e)) : e; }], transformResponse: [function (e) { if (typeof e === 'string') try { e = JSON.parse(e); } catch (e) {} return e; }], timeout: 0, xsrfCookieName: 'XSRF-TOKEN', xsrfHeaderName: 'X-XSRF-TOKEN', maxContentLength: -1, validateStatus(e) { return e >= 200 && e < 300; },
    }; te.headers = { common: { Accept: 'application/json, text/plain, */*' } }, B.forEach(['delete', 'get', 'head'], (e) => { te.headers[e] = {}; }), B.forEach(['post', 'put', 'patch'], (e) => { te.headers[e] = B.merge(Q); }); const re = te; function ne(e) { e.cancelToken && e.cancelToken.throwIfRequested(); } function Oe(t) { return ne(t), t.headers = t.headers || {}, t.data = M(t.data, t.headers, t.transformRequest), t.headers = B.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers), B.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], (e) => { delete t.headers[e]; }), (t.adapter || re.adapter)(t).then(e => ne(t), e.data = M(e.data, e.headers, t.transformResponse), e, e => z(e) || (ne(t), e && e.response && (e.response.data = M(e.response.data, e.response.headers, t.transformResponse))), Promise.reject(e)); } function Se(t, r) {
    r = r || {}; let n = {},
      e = ['url', 'method', 'params', 'data'],
      o = ['headers', 'auth', 'proxy'],
      i = ['baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath']; B.forEach(e, (e) => { void 0 !== r[e] && (n[e] = r[e]); }), B.forEach(o, (e) => { B.isObject(r[e]) ? n[e] = B.deepMerge(t[e], r[e]) : void 0 !== r[e] ? n[e] = r[e] : B.isObject(t[e]) ? n[e] = B.deepMerge(t[e]) : void 0 !== t[e] && (n[e] = t[e]); }), B.forEach(i, (e) => { void 0 !== r[e] ? n[e] = r[e] : void 0 !== t[e] && (n[e] = t[e]); }); let a = e.concat(o).concat(i),
      u = Object.keys(r).filter(e => a.indexOf(e) === -1); return B.forEach(u, (e) => { void 0 !== r[e] ? n[e] = r[e] : void 0 !== t[e] && (n[e] = t[e]); }), n;
  } function Ce(e) { this.defaults = e, this.interceptors = { request: new $(), response: new $() }; }Ce.prototype.request = function (e, t) {
    typeof e === 'string' ? (e = t || {}).url = arguments[0] : e = e || {}, (e = Se(this.defaults, e)).method ? e.method = e.method.toLowerCase() : this.defaults.method ? e.method = this.defaults.method.toLowerCase() : e.method = 'get'; let r = [Oe, void 0],
      n = Promise.resolve(e); for (this.interceptors.request.forEach((e) => { r.unshift(e.fulfilled, e.rejected); }), this.interceptors.response.forEach((e) => { r.push(e.fulfilled, e.rejected); }); r.length;)n = n.then(r.shift(), r.shift()); return n;
  }, Ce.prototype.getUri = function (e) { return e = Se(this.defaults, e), L(e.url, e.params, e.paramsSerializer).replace(/^\?/, ''); }, B.forEach(['delete', 'get', 'head', 'options'], (r) => { Ce.prototype[r] = function (e, t) { return this.request(B.merge(t || {}, { method: r, url: e })); }; }), B.forEach(['post', 'put', 'patch'], (n) => { Ce.prototype[n] = function (e, t, r) { return this.request(B.merge(r || {}, { method: n, url: e, data: t })); }; }); const xe = Ce; function je(e) { this.message = e; }je.prototype.toString = function () { return `Cancel${this.message ? `: ${this.message}` : ''}`; }, je.prototype.__CANCEL__ = !0; const Ee = je; function Pe(e) { if (typeof e !== 'function') throw new TypeError('executor must be a function.'); let t; this.promise = new Promise(((e) => { t = e; })); const r = this; e((e) => { r.reason || (r.reason = new Ee(e), t(r.reason)); }); }Pe.prototype.throwIfRequested = function () { if (this.reason) throw this.reason; }, Pe.source = function () { let t; return { token: new Pe(((e) => { t = e; })), cancel: t }; }; const De = Pe; function ke(e) {
    let t = new xe(e),
      r = D(xe.prototype.request, t); return B.extend(r, xe.prototype, t), B.extend(r, t), r;
  } const Ae = ke(re); Ae.Axios = xe, Ae.create = function (e) { return ke(Se(Ae.defaults, e)); }, Ae.Cancel = Ee, Ae.CancelToken = De, Ae.isCancel = z, Ae.all = function (e) { return Promise.all(e); }, Ae.spread = function (t) { return function (e) { return t(...e); }; }; let Te = Ae,
    _e = Ae; Te.default = _e; function Re(e) { return typeof e === 'function' ? e : function () {}; } var Fe = Te,
    Be = w((e) => {
      let i,
        r; i = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', r = {
        rotl(e, t) { return e << t | e >>> 32 - t; }, rotr(e, t) { return e << 32 - t | e >>> t; }, endian(e) { if (e.constructor == Number) return 16711935 & r.rotl(e, 8) | 4278255360 & r.rotl(e, 24); for (let t = 0; t < e.length; t++)e[t] = r.endian(e[t]); return e; }, randomBytes(e) { for (var t = []; e > 0; e--)t.push(Math.floor(256 * Math.random())); return t; }, bytesToWords(e) { for (var t = [], r = 0, n = 0; r < e.length; r++, n += 8)t[n >>> 5] |= e[r] << 24 - n % 32; return t; }, wordsToBytes(e) { for (var t = [], r = 0; r < 32 * e.length; r += 8)t.push(e[r >>> 5] >>> 24 - r % 32 & 255); return t; }, bytesToHex(e) { for (var t = [], r = 0; r < e.length; r++)t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16)); return t.join(''); }, hexToBytes(e) { for (var t = [], r = 0; r < e.length; r += 2)t.push(parseInt(e.substr(r, 2), 16)); return t; }, bytesToBase64(e) { for (var t = [], r = 0; r < e.length; r += 3) for (let n = e[r] << 16 | e[r + 1] << 8 | e[r + 2], o = 0; o < 4; o++)8 * r + 6 * o <= 8 * e.length ? t.push(i.charAt(n >>> 6 * (3 - o) & 63)) : t.push('='); return t.join(''); }, base64ToBytes(e) { e = e.replace(/[^A-Z0-9+\/]/gi, ''); for (var t = [], r = 0, n = 0; r < e.length; n = ++r % 4)n != 0 && t.push((i.indexOf(e.charAt(r - 1)) & Math.pow(2, -2 * n + 8) - 1) << 2 * n | i.indexOf(e.charAt(r)) >>> 6 - 2 * n); return t; },
      }, e.exports = r;
    }),
    Ne = { utf8: { stringToBytes(e) { return Ne.bin.stringToBytes(unescape(encodeURIComponent(e))); }, bytesToString(e) { return decodeURIComponent(escape(Ne.bin.bytesToString(e))); } }, bin: { stringToBytes(e) { for (var t = [], r = 0; r < e.length; r++)t.push(255 & e.charCodeAt(r)); return t; }, bytesToString(e) { for (var t = [], r = 0; r < e.length; r++)t.push(String.fromCharCode(e[r])); return t.join(''); } } },
    Le = Ne,
    Ue = w((e) => {
      function t(e, t) {
        const r = m.wordsToBytes(function (e) {
          e.constructor == String ? e = b.stringToBytes(e) : typeof Buffer !== 'undefined' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(e) ? e = Array.prototype.slice.call(e, 0) : Array.isArray(e) || (e = e.toString()); let t = m.bytesToWords(e),
            r = 8 * e.length,
            n = [],
            o = 1732584193,
            i = -271733879,
            a = -1732584194,
            u = 271733878,
            s = -1009589776; t[r >> 5] |= 128 << 24 - r % 32, t[15 + (64 + r >>> 9 << 4)] = r; for (let c = 0; c < t.length; c += 16) { for (var l = o, f = i, p = a, d = u, h = s, y = 0; y < 80; y++) { if (y < 16)n[y] = t[c + y]; else { const v = n[y - 3] ^ n[y - 8] ^ n[y - 14] ^ n[y - 16]; n[y] = v << 1 | v >>> 31; } const g = (o << 5 | o >>> 27) + s + (n[y] >>> 0) + (y < 20 ? 1518500249 + (i & a | ~i & u) : y < 40 ? 1859775393 + (i ^ a ^ u) : y < 60 ? (i & a | i & u | a & u) - 1894007588 : (i ^ a ^ u) - 899497514); s = u, u = a, a = i << 30 | i >>> 2, i = o, o = g; }o += l, i += f, a += p, u += d, s += h; } return [o, i, a, u, s];
        }(e)); return t && t.asBytes ? r : t && t.asString ? n.bytesToString(r) : m.bytesToHex(r);
      } let m,
        b,
        n; m = Be, b = Le.utf8, n = Le.bin, t._blocksize = 16, t._digestsize = 20, e.exports = t;
    }),
    Me = b(w((e, t) => {
      let r; e.exports = (r = h, (function (r) { function n(e) { if (o[e]) return o[e].exports; const t = o[e] = { i: e, l: !1, exports: {} }; return r[e].call(t.exports, t, t.exports, n), t.l = !0, t.exports; } var o = {}; return n.m = r, n.c = o, n.i = function (e) { return e; }, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { configurable: !1, enumerable: !0, get: r }); }, n.n = function (e) { const t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, 'a', t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = '', n(n.s = 11); }([function (e, t, r) { let n; !(function () { function a() { for (var e = [], t = 0; t < arguments.length; t++) { const r = arguments[t]; if (r) { const n = typeof r; if (n == 'string' || n == 'number')e.push(r); else if (Array.isArray(r) && r.length) { const o = a(...r); o && e.push(o); } else if (n == 'object') for (const i in r)u.call(r, i) && r[i] && e.push(i); } } return e.join(' '); } var u = {}.hasOwnProperty; void 0 !== e && e.exports ? (a.default = a, e.exports = a) : void 0 !== (n = function () { return a; }.apply(t, [])) && (e.exports = n); }()); }, function (e, t) { e.exports = r; }, function (e, t, r) {
        Object.defineProperty(t, '__esModule', { value: !0 }), t.Progress = void 0; let n = r(8),
          o = (function (e) { return e && e.__esModule ? e : { default: e }; }(n)); t.Progress = o.default;
      }, function (e, t, r) {
        function n(e, t, r) {
          return t in e ? Object.defineProperty(e, t, {
            value: r, enumerable: !0, configurable: !0, writable: !0,
          }) : e[t] = r, e;
        }Object.defineProperty(t, '__esModule', { value: !0 }); let o,
          i = (t.prefixClass = 'react-sweet-progress', t.DEFAULT_TRAIL_COLOR = '#efefef', t.STATUSES = {
            ACTIVE: 'active', SUCCESS: 'success', ERROR: 'error', DEFAULT: 'default',
          }); t.COLOR_MAP = (n(o = {}, i.ACTIVE, '#138ce4'), n(o, i.SUCCESS, '#049e51'), n(o, i.ERROR, '#e23f33'), o);
      }, function (e, t) {
        e.exports = {
          'react-sweet-progress-line': 'react-sweet-progress-line', 'react-sweet-progress-line-inner': 'react-sweet-progress-line-inner', 'react-sweet-progress-line-inner-status-active': 'react-sweet-progress-line-inner-status-active', 'active-anim': 'active-anim',
        };
      }, function (e, t, r) {
        function n(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(t, '__esModule', { value: !0 }); let h = Object.assign || function (e) { for (let t = 1; t < arguments.length; t++) { const r = arguments[t]; for (const n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]); } return e; },
          y = (function () {
            const c = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 60103; return function (e, t, r, n) {
              let o = e && e.defaultProps,
                i = arguments.length - 3; if (t || i == 0 || (t = {}), t && o) for (const a in o) void 0 === t[a] && (t[a] = o[a]); else t = t || o || {}; if (i == 1)t.children = n; else if (i > 1) { for (var u = Array(i), s = 0; s < i; s++)u[s] = arguments[s + 3]; t.children = u; } return {
                $$typeof: c, type: e, key: void 0 === r ? null : `${r}`, ref: null, props: t, _owner: null,
              };
            };
          }()),
          o = (function () { function n(e, t) { for (let r = 0; r < t.length; r++) { const n = t[r]; n.enumerable = n.enumerable || !1, n.configurable = !0, 'value' in n && (n.writable = !0), Object.defineProperty(e, n.key, n); } } return function (e, t, r) { return t && n(e.prototype, t), r && n(e, r), e; }; }()),
          i = r(1),
          v = n(i),
          a = r(0),
          g = n(a),
          u = r(9),
          m = n(u),
          s = (function (e) {
            function t() { return (function (e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function'); }(this, t)), (function (e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || typeof t !== 'object' && typeof t !== 'function' ? e : t; }(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments))); } return (function (e, t) {
              if (typeof t !== 'function' && t !== null) throw new TypeError(`Super expression must either be null or a function, not ${typeof t}`); e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e, enumerable: !1, writable: !0, configurable: !0,
                },
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }(t, e)), o(t, [{
              key: 'getPathStyles',
              value() {
                let e = this.props,
                  t = (e.prefixClass, e.percent),
                  r = e.strokeWidth,
                  n = e.gapDegree,
                  o = void 0 === n ? 0 : n,
                  i = (e.gapPosition, 50 - r / 2),
                  a = -i,
                  u = -2 * i,
                  s = `M 50,50 m 0,${a}\n     a ${i },${i } 0 1 1 0,${-u }\n     a ${i },${i} 0 1 1 ${-0},${u}`,
                  c = 2 * Math.PI * i; return { pathString: s, trailPathStyle: { strokeDasharray: `${c - o}px ${c}px`, strokeDashoffset: `-${o / 2 }px`, transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s' }, strokePathStyle: { strokeDasharray: `${t / 100 * (c - o)}px ${c}px`, strokeDashoffset: `-${o / 2 }px`, transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s' } };
              },
            }, {
              key: 'render',
              value() {
                let t = this,
                  e = this.props,
                  r = e.prefixClass,
                  n = e.strokeWidth,
                  o = e.strokeColor,
                  i = e.trailColor,
                  a = e.style,
                  u = e.className,
                  s = (function (e, t) { const r = {}; for (const n in e)t.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]); return r; }(e, ['prefixClass', 'strokeWidth', 'strokeColor', 'trailColor', 'style', 'className'])),
                  c = (0, g.default)(m.default[`${r}-circle`], u),
                  l = this.getPathStyles(),
                  f = l.pathString,
                  p = l.trailPathStyle,
                  d = l.strokePathStyle; return delete s.percent, delete s.gapDegree, delete s.gapPosition, v.default.createElement('svg', h({ className: c, viewBox: '0 0 100 100', style: a }, s), y('path', {
                  d: f, stroke: i, strokeWidth: n, fillOpacity: '0', style: p,
                }), v.default.createElement('path', {
                  d: f, stroke: o, strokeWidth: n, fillOpacity: '0', ref(e) { t.path = e; }, style: d,
                }));
              },
            }]), t;
          }(i.Component)); t.default = s;
      }, function (e, t, r) {
        function n(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(t, '__esModule', { value: !0 }); let o = (function () {
            const c = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 60103; return function (e, t, r, n) {
              let o = e && e.defaultProps,
                i = arguments.length - 3; if (t || i == 0 || (t = {}), t && o) for (const a in o) void 0 === t[a] && (t[a] = o[a]); else t = t || o || {}; if (i == 1)t.children = n; else if (i > 1) { for (var u = Array(i), s = 0; s < i; s++)u[s] = arguments[s + 3]; t.children = u; } return {
                $$typeof: c, type: e, key: void 0 === r ? null : `${r}`, ref: null, props: t, _owner: null,
              };
            };
          }()),
          i = (function () { function n(e, t) { for (let r = 0; r < t.length; r++) { const n = t[r]; n.enumerable = n.enumerable || !1, n.configurable = !0, 'value' in n && (n.writable = !0), Object.defineProperty(e, n.key, n); } } return function (e, t, r) { return t && n(e.prototype, t), r && n(e, r), e; }; }()),
          a = r(1),
          u = (n(a), r(0)),
          s = (n(u), r(4)),
          c = (n(s), (function (e) {
            function t() { return (function (e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function'); }(this, t)), (function (e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || typeof t !== 'object' && typeof t !== 'function' ? e : t; }(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments))); } return (function (e, t) {
              if (typeof t !== 'function' && t !== null) throw new TypeError(`Super expression must either be null or a function, not ${typeof t}`); e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e, enumerable: !1, writable: !0, configurable: !0,
                },
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }(t, e)), i(t, [{
              key: 'render',
              value() {
                const e = this.props.size ? { width: this.props.size, height: this.props.size } : { width: '20px', height: '20px' }; switch (this.props.name) {
                  case 'success': return o('svg', { version: '1.1', viewBox: '0 0 512 512', style: e }, void 0, o('path', { fill: '#049e51', d: 'M489,255.9c0-0.2,0-0.5,0-0.7c0-1.6,0-3.2-0.1-4.7c0-0.9-0.1-1.8-0.1-2.8c0-0.9-0.1-1.8-0.1-2.7  c-0.1-1.1-0.1-2.2-0.2-3.3c0-0.7-0.1-1.4-0.1-2.1c-0.1-1.2-0.2-2.4-0.3-3.6c0-0.5-0.1-1.1-0.1-1.6c-0.1-1.3-0.3-2.6-0.4-4  c0-0.3-0.1-0.7-0.1-1C474.3,113.2,375.7,22.9,256,22.9S37.7,113.2,24.5,229.5c0,0.3-0.1,0.7-0.1,1c-0.1,1.3-0.3,2.6-0.4,4  c-0.1,0.5-0.1,1.1-0.1,1.6c-0.1,1.2-0.2,2.4-0.3,3.6c0,0.7-0.1,1.4-0.1,2.1c-0.1,1.1-0.1,2.2-0.2,3.3c0,0.9-0.1,1.8-0.1,2.7  c0,0.9-0.1,1.8-0.1,2.8c0,1.6-0.1,3.2-0.1,4.7c0,0.2,0,0.5,0,0.7c0,0,0,0,0,0.1s0,0,0,0.1c0,0.2,0,0.5,0,0.7c0,1.6,0,3.2,0.1,4.7  c0,0.9,0.1,1.8,0.1,2.8c0,0.9,0.1,1.8,0.1,2.7c0.1,1.1,0.1,2.2,0.2,3.3c0,0.7,0.1,1.4,0.1,2.1c0.1,1.2,0.2,2.4,0.3,3.6  c0,0.5,0.1,1.1,0.1,1.6c0.1,1.3,0.3,2.6,0.4,4c0,0.3,0.1,0.7,0.1,1C37.7,398.8,136.3,489.1,256,489.1s218.3-90.3,231.5-206.5  c0-0.3,0.1-0.7,0.1-1c0.1-1.3,0.3-2.6,0.4-4c0.1-0.5,0.1-1.1,0.1-1.6c0.1-1.2,0.2-2.4,0.3-3.6c0-0.7,0.1-1.4,0.1-2.1  c0.1-1.1,0.1-2.2,0.2-3.3c0-0.9,0.1-1.8,0.1-2.7c0-0.9,0.1-1.8,0.1-2.8c0-1.6,0.1-3.2,0.1-4.7c0-0.2,0-0.5,0-0.7  C489,256,489,256,489,255.9C489,256,489,256,489,255.9z', id: 'XMLID_3_' }), o('g', {
                    fill: 'none', stroke: '#FFFFFF', strokeWidth: 30, strokeMiterlimit: 10,
                  }, void 0, o('line', {
                    x1: '213.6', x2: '369.7', y1: '344.2', y2: '188.2',
                  }), o('line', {
                    x1: '233.8', x2: '154.7', y1: '345.2', y2: '266.1',
                  }))); case 'error': return o('svg', { version: '1.1', viewBox: '0 0 50 50', style: e }, void 0, o('circle', {
                    fill: '#e23f33', cx: '25', cy: '25', r: '25',
                  }), o('polyline', {
                    fill: 'none', stroke: '#FFFFFF', strokeWidth: 3, strokeLinecap: 'round', strokeMiterlimit: 10, points: '16,34 25,25 34,16',
                  }), o('polyline', {
                    fill: 'none', stroke: '#FFFFFF', strokeWidth: 3, strokeLinecap: 'round', strokeMiterlimit: 10, points: '16,16 25,25 34,34',
                  })); default: return null;
                }
              },
            }]), t;
          }(a.Component))); t.default = c;
      }, function (e, t, r) {
        function n(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(t, '__esModule', { value: !0 }); let p = (function () {
            const c = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 60103; return function (e, t, r, n) {
              let o = e && e.defaultProps,
                i = arguments.length - 3; if (t || i == 0 || (t = {}), t && o) for (const a in o) void 0 === t[a] && (t[a] = o[a]); else t = t || o || {}; if (i == 1)t.children = n; else if (i > 1) { for (var u = Array(i), s = 0; s < i; s++)u[s] = arguments[s + 3]; t.children = u; } return {
                $$typeof: c, type: e, key: void 0 === r ? null : `${r}`, ref: null, props: t, _owner: null,
              };
            };
          }()),
          o = r(1),
          i = (n(o), r(0)),
          d = n(i),
          a = (r(3), r(4)),
          h = n(a); t.default = function (e) {
          let t,
            r,
            n,
            o = e.prefixClass,
            i = e.percent,
            a = e.className,
            u = e.status,
            s = e.background,
            c = e.trailColor,
            l = (0, d.default)(h.default[`${o}-line`], a),
            f = (0, d.default)(h.default[`${o}-line-inner`], (t = {}, r = h.default[`${o}-line-inner-status-${u}`], n = !!u, r in t ? Object.defineProperty(t, r, {
              value: n, enumerable: !0, configurable: !0, writable: !0,
            }) : t[r] = n, t)); return p('div', { className: l, style: { backgroundColor: c } }, void 0, p('div', { className: f, style: { width: `${i}%`, backgroundColor: s } }));
        };
      }, function (e, t, r) {
        function n(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(t, '__esModule', { value: !0 }); let O = Object.assign || function (e) { for (let t = 1; t < arguments.length; t++) { const r = arguments[t]; for (const n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]); } return e; },
          S = (function () {
            const c = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 60103; return function (e, t, r, n) {
              let o = e && e.defaultProps,
                i = arguments.length - 3; if (t || i == 0 || (t = {}), t && o) for (const a in o) void 0 === t[a] && (t[a] = o[a]); else t = t || o || {}; if (i == 1)t.children = n; else if (i > 1) { for (var u = Array(i), s = 0; s < i; s++)u[s] = arguments[s + 3]; t.children = u; } return {
                $$typeof: c, type: e, key: void 0 === r ? null : `${r}`, ref: null, props: t, _owner: null,
              };
            };
          }()),
          o = (function () { function n(e, t) { for (let r = 0; r < t.length; r++) { const n = t[r]; n.enumerable = n.enumerable || !1, n.configurable = !0, 'value' in n && (n.writable = !0), Object.defineProperty(e, n.key, n); } } return function (e, t, r) { return t && n(e.prototype, t), r && n(e, r), e; }; }()),
          i = r(1),
          a = (n(i), r(0)),
          C = n(a),
          x = r(3),
          u = r(10),
          j = n(u),
          s = r(7),
          E = n(s),
          c = r(5),
          P = n(c),
          l = r(6),
          f = n(l),
          p = (function (e) {
            function r(e) { !(function (e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function'); }(this, r)); const t = (function (e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || typeof t !== 'object' && typeof t !== 'function' ? e : t; }(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, e))); return t.state = { status: e.status || x.STATUSES.ACTIVE }, t; } return (function (e, t) {
              if (typeof t !== 'function' && t !== null) throw new TypeError(`Super expression must either be null or a function, not ${typeof t}`); e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e, enumerable: !1, writable: !0, configurable: !0,
                },
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }(r, e)), o(r, [{ key: 'getSymbolByStatus', value(e, t) { switch (e) { case x.STATUSES.SUCCESS: return S(f.default, { name: 'success', size: t }); case x.STATUSES.ERROR: return S(f.default, { name: 'error', size: t }); default: return `${this.props.percent}%`; } } }, {
              key: 'render',
              value() {
                let e = this.props,
                  t = e.percent,
                  r = e.status,
                  n = e.theme,
                  o = e.style,
                  i = e.className,
                  a = e.symbolClassName,
                  u = e.type,
                  s = e.width,
                  c = e.strokeWidth,
                  l = null; l = t === 0 ? x.STATUSES.DEFAULT : t >= 100 && !r ? x.STATUSES.SUCCESS : r || x.STATUSES.ACTIVE; let f = n && n[l],
                  p = f ? f.color : x.COLOR_MAP[l],
                  d = f ? f.trailColor : x.DEFAULT_TRAIL_COLOR; if (u === 'circle') {
                  let h = s || 132,
                    y = 0.16 * h + 6,
                    v = 1.25 * y,
                    g = f && f.symbol || this.getSymbolByStatus(l, v),
                    m = O({ width: h, height: h, fontSize: y }, o),
                    b = c || 6; return S('div', { className: `${x.prefixClass}-circle-outer`, style: m }, void 0, S(P.default, {
                    percent: t, strokeWidth: b, strokeColor: p, trailColor: d, prefixClass: x.prefixClass, gapDegree: 0, gapPosition: 'top',
                  }), S('div', { className: j.default[`${x.prefixClass}-symbol-absolute`] }, void 0, S('div', { className: (0, C.default)(j.default[`${x.prefixClass}-symbol`], a) }, void 0, g)));
                } const w = f && f.symbol || this.getSymbolByStatus(l); return S('div', { className: (0, C.default)(j.default[`${x.prefixClass}`], i), style: o }, void 0, S(E.default, {
                  prefixClass: x.prefixClass, percent: t, status: l, background: p, trailColor: d,
                }), S('div', { className: (0, C.default)(j.default[`${x.prefixClass}-symbol`], a) }, void 0, w));
              },
            }]), r;
          }(i.Component)); p.defaultProps = { percent: 0 }, t.default = p;
      }, function (e, t) { e.exports = { 'react-sweet-progress-circle': 'react-sweet-progress-circle' }; }, function (e, t) {
        e.exports = {
          'react-sweet-progress': 'react-sweet-progress', 'react-sweet-progress-symbol': 'react-sweet-progress-symbol', 'react-sweet-progress-symbol-absolute': 'react-sweet-progress-symbol-absolute', 'react-sweet-progress-circle-outer': 'react-sweet-progress-circle-outer',
        };
      }, function (e, t, r) { r(2), e.exports = r(2); }])));
    })); e.default = function (e) {
    let t = e.dropzoneOptions,
      r = e.onComplete,
      n = e.onError,
      o = e.onProgress,
      i = e.cloudinaryConfig,
      a = e.className,
      u = e.children; r = Re(r), n = Re(n), o = Re(o); const s = {}; Object.assign(s, {
      apiKey: '', apiSecret: '', cloudName: '', public_id: '', format: '', upload_preset: '',
    }, i), console.log(s); let c = g(oe.useState(0), 2),
      l = c[0],
      f = c[1],
      p = oe.useCallback((e) => {
        f(0), (function (e) {
          const g = arguments.length > 0 && void 0 !== e ? e : {}; Object.assign(g, { apiKey: '', apiSecret: '', cloudName: '' }); return function (e, t, r, n) {
            let o = arguments.length > 1 && void 0 !== t ? t : '',
              i = arguments.length > 2 && void 0 !== r ? r : '',
              a = arguments.length > 3 && void 0 !== n ? n : '',
              u = g.apiKey,
              s = g.apiSecret,
              c = g.cloudName,
              l = i,
              f = o === '' ? e.name.replace(/\.[^/.]+$/, '') : o,
              p = a,
              d = Date.now(),
              h = new FormData(); h.append('file', e), h.append('timestamp', ''.concat(d)), h.append('public_id', f), h.append('api_key', u); let y = Ue('public_id='.concat(f, '&timestamp=').concat(d).concat(s)); p !== '' && (y = Ue('public_id='.concat(f, '&timestamp=').concat(d, '&upload_preset=').concat(p).concat(s)), h.append('upload_preset', p)), h.append('signature', y); const v = 'https://api.cloudinary.com/v1_1/'.concat(c, '/').concat(l, '/upload'); return new Promise(((t, r) => {
              Fe.request({
                method: 'post', url: v, data: h, onUploadProgress(e) { typeof g.onUploadProgress === 'function' && g.onUploadProgress(Math.ceil(e.loaded / e.total)); },
              }).then((e) => { const t = e.data; return typeof g.onUploadProgress === 'function' && g.onUploadProgress(1), t; }).then(e => t(e)).catch(e => r(e));
            }));
          };
        }(function (o) {
          for (let e = 1; e < arguments.length; e++) {
            var i = arguments[e] != null ? arguments[e] : {}; e % 2 ? v(i, !0).forEach((e) => {
              let t,
                r,
                n; t = o, n = i[r = e], r in t ? Object.defineProperty(t, r, {
                value: n, enumerable: !0, configurable: !0, writable: !0,
              }) : t[r] = n;
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(o, Object.getOwnPropertyDescriptors(i)) : v(i).forEach((e) => { Object.defineProperty(o, e, Object.getOwnPropertyDescriptor(i, e)); });
          } return o;
        }({}, s, { onUploadProgress(e) { f(e), o(e); } })))(e[0], s.public_id, s.upload_preset).then(r).catch(n);
      }),
      d = Object.assign({ multiple: !1 }, t || {}); return h.createElement(h.Fragment, null, h.createElement(P, y({ onDrop: p }, d), (e) => {
      let t = e.getRootProps,
        r = e.getInputProps; return h.createElement('section', { className: 'dropzone-cloudinary '.concat(a || '') }, h.createElement('div', t(), h.createElement('input', r()), u || h.createElement(h.Fragment, null, h.createElement('p', null, h.createElement('svg', {
        width: '16', height: '16', viewBox: '0 0 16 16', fill: 'none', xmlns: 'http://www.w3.org/2000/svg',
      }, h.createElement('path', {
        fillRule: 'evenodd', clipRule: 'evenodd', d: 'M8 0C8.55229 0 9 0.447715 9 1V15C9 15.5523 8.55229 16 8 16C7.44772 16 7 15.5523 7 15V1C7 0.447715 7.44772 0 8 0Z', fill: '#91796B',
      }), h.createElement('path', {
        fillRule: 'evenodd', clipRule: 'evenodd', d: 'M0 8C0 7.44772 0.447715 7 1 7H15C15.5523 7 16 7.44772 16 8C16 8.55229 15.5523 9 15 9H1C0.447715 9 0 8.55229 0 8Z', fill: 'gray',
      }))), h.createElement('p', null, 'Drag file here ', h.createElement('br', null), ' Or ', h.createElement('br', null), ' Click to select'))));
    }), l ? h.createElement(Me, { percent: 100 * l, status: l < 1 ? 'active' : 'success' }) : '');
  }, Object.defineProperty(e, '__esModule', { value: !0 });
}));
// # sourceMappingURL=data:application/json;charset=utf-8;base64,
